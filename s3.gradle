buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //testCompile group: 'junit', name: 'junit', version: '4.11'
        //compile 'commons-lang:commons-lang:2.6'
        classpath 'commons-lang:commons-lang:2.6','net.java.dev.jets3t:jets3t:0.9.2'
    }
}

import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.S3ServiceException;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.model.S3Bucket;

class Settings{

    String bucketName="raml-tools-stage.mulesoft.com";
    String versionStorage="all-versions/";
    String commonPart="raml-for-jax-rs";
    String commonPrefix=commonPart+"-";

    File projectFolder;

    private Settings(){

    }

    public static Settings INSTANCE=new Settings();
}
Map ENV = System.getenv()
ENV = System.getenv()
String awsAccessKey = ENV['AWSKEY']
String awsSecretKey = ENV['AWSSECRET']
String bucketName=ENV['BUCKET'];
Settings.INSTANCE.projectFolder=projectDir;

task updateVersions(){
    String version=determineBuildVersion(Settings.INSTANCE,false);
    updateVersionsRecurrently(version,Settings.INSTANCE.projectFolder);
}
public void updateVersionsRecurrently(String version,File folder){
    File pom=new File(folder,"pom.xml");
    if (pom.exists()){
        rewriteAVersion(version,pom);
    }
    File mf=new File(folder,"MANIFEST.MF");
    if (mf.exists()){
        rewriteAManifest(version,mf);
    }
    File feature=new File(folder,"feature.xml");
    if (feature.exists()){
        rewriteAFeature(version,feature);
    }
    File category=new File(folder,"category.xml");
    if (category.exists()){
        rewriteACategory(version,category);
    }
    for (File f:folder.listFiles()){
        if (f.isDirectory()){
            updateVersionsRecurrently(version,f);
        }
    }
}
public void rewriteAVersion(String newVersion,File fl){
    ArrayList<String>newLines=new ArrayList<>();
    boolean  insideDetails=false;
    for (String line:fl.readLines()){
        int pos=line.indexOf("<version>");
        if (line.indexOf("<dependency>")!=-1){
            insideDetails=true;
        }
        if (line.indexOf("</dependency>")!=-1){
            insideDetails=false;
        }
        if (line.indexOf("<plugin>")!=-1){
            insideDetails=true;
        }
        if (line.indexOf("<extensions>")!=-1){
            insideDetails=true;
        }
        if (line.indexOf("</extensions>")!=-1){
            insideDetails=false;
        }
        if (line.indexOf("</plugin>")!=-1){
            insideDetails=false;
        }
        if (!insideDetails) {
            if (pos != -1) {
                line = line.substring(pos + "<version>".length());
                pos = line.indexOf("</version>");
                if (pos != -1) {
                    line = line.substring(0, pos).trim();
                    if (line.endsWith("-SNAPSHOT")) {
                        line = line.substring(0, line.length() - "-SNAPSHOT".length());
                    }
                    line = "<version>" + newVersion + "</version>";
                }
            }
        }
        newLines.add(line);
    }
    PrintWriter we=fl.newPrintWriter();
    for (String q: newLines){
        we.println(q);
    }
    we.close();
}
public void rewriteAFeature(String newVersion,File fl){
    ArrayList<String>newLines=new ArrayList<>();
    boolean  insideDetails=true;

    for (String line:fl.readLines()){
        if (line.trim().startsWith("<feature")){
            insideDetails=false;
        }
        if (!insideDetails){
            int c=line.indexOf("version=\"");
            if (c!=-1){
                String startLine=line.substring(0,c);
                int e=line.indexOf('"',c+"version=\"".length());
                String endLine=line.substring(e+1);
                println(startLine);
                println(endLine);
                line=startLine+"version=\""+newVersion.replace("-SNAPSHOT",".qualifier")+"\"";
            }
        }
        if (line.trim().contains(">")){
            insideDetails=true;
        }
        newLines.add(line);
    }
    PrintWriter we=fl.newPrintWriter();
    for (String q: newLines){
        we.println(q);
    }
    we.close();
}
public void rewriteACategory(String newVersion,File fl){
    ArrayList<String>newLines=new ArrayList<>();
    boolean  insideDetails=true;
    for (String line:fl.readLines()){
        if (line.trim().startsWith("<feature")) {
            int c=line.indexOf("id=\"");
            if (c!=-1){
                int e=line.indexOf('"',c+"id=\"".length());
                String featureId=line.substring(c+"id=\"".length(),e);
                String featureVer=newVersion.replace("-SNAPSHOT",".qualifier");
                String newLine="<feature url=\"features/"+featureId+"_"+featureVer+".jar\"" +
                        " id=\""+featureId+"\" version=\""+featureVer+"\">";
                line=newLine;
            }
        }
        newLines.add(line);
    }
    PrintWriter we=fl.newPrintWriter();
    for (String q: newLines){
        we.println(q);
    }
    we.close();
}
public void rewriteAManifest(String newVersion,File fl){
    ArrayList<String>newLines=new ArrayList<>();
    boolean  insideDetails=false;
    for (String line:fl.readLines()){
        if (line.trim().startsWith("Bundle-Version: ")){
            String manifestVersion=newVersion.replace("-SNAPSHOT",".qualifier");
            line="Bundle-Version: "+manifestVersion;
        }
        newLines.add(line);
    }
    PrintWriter we=fl.newPrintWriter();
    for (String q: newLines){
        we.println(q);
    }
    we.close();
}

task deployS3(){
    org.jets3t.service.security.AWSCredentials z1=new org.jets3t.service.security.AWSCredentials(awsAccessKey,
            awsSecretKey);
    RestS3Service z=new RestS3Service(z1);
    Settings settings=Settings.INSTANCE;
    //settings.projectFolder=project;
    settings.bucketName=bucketName;
    File td=prepareToDeploy(settings);
    File indexHtml=new File(settings.getProjectFolder(),"temp");
    File index=new File(indexHtml,"index.html");
    indexHtml.mkdirs();
    if (index.exists()){
        index.delete();
    }
    String newVersion=determineBuildVersion(settings,true);
    println(newVersion);
    LinkedHashSet<String> versions=listVersions(z,settings);
    versions.add(newVersion);
    PrintStream ps=new PrintStream(new FileOutputStream(index));
    generateIndexHTML(ps,versions,settings);
    ps.close();
    processDirectory(z,new S3Bucket(settings.bucketName),indexHtml,indexHtml,settings.commonPart+"/all-versions");
    //copy to versions list
    processDirectory(z, new S3Bucket(settings.bucketName), td, td, settings.commonPart+"/all-versions/" + settings.commonPrefix + newVersion);
    //copy to current
    processDirectory(z, new S3Bucket(settings.bucketName), td, td, settings.commonPart+"/current");
}
/**
 *
 * @param settings
 * @return version number determined from the build
 */
public String determineBuildVersion(Settings settings,boolean stripSnapshot){
    File fl=new File(settings.getProjectFolder(),"pom.xml");
    for (String line:fl.readLines()){
        int pos=line.indexOf("<version>");
        if (pos!=-1){
            line=line.substring(pos+"<version>".length());
            pos=line.indexOf("</version>");
            if (pos!=-1){
                line=line.substring(0,pos).trim();
                if (line.endsWith("-SNAPSHOT")&&stripSnapshot){
                    line=line.substring(0,line.length()-"-SNAPSHOT".length());
                }
                return line;
            }
        }
    }
}


/**
 *
 * @param service
 * @param settings
 * @return set of versions that are currently deployed to s3
 */
LinkedHashSet<String> listVersions(RestS3Service service,Settings settings){
    LinkedHashSet<String>result=new LinkedHashSet<>();
    for (v in service.listObjects(settings.bucketName,settings.versionStorage,null)){
        String subKey=v.key.substring("all-versions/".length());
        int slash=subKey.indexOf('/');
        if (slash!=-1){
            subKey=subKey.substring(0,slash);
            if (subKey.startsWith(settings.commonPrefix)) {
                subKey = subKey.substring(settings.commonPrefix.length());
                result.add(subKey);
            }
        }
    }
    return result;
}
/**
 * generates version listing
 * @param ps
 * @param versions
 * @param settings
 */
void generateIndexHTML(PrintStream ps,LinkedHashSet<String>versions,Settings settings) {
    ps.println("<html>");
    ps.println("<head>\n" +
            "  <title>RAML for JAX-RS - all versions</title>\n" +
            " </head>\n" +
            " <body>");
    for (String version in versions){
        ps.println("<ul>");
        ps.println("<li>"+settings.commonPrefix+version+"</li>");
        //generating links
        ps.println("<ul>");
        String versionPrefix="http://"+settings.bucketName+"/"+settings.versionStorage+settings.commonPrefix+version;
        printLink(ps,versionPrefix+"/eclipse","eclipse");
        printLink(ps,versionPrefix+"/CLI/raml-to-jax-rs.jar","raml-to-jax-rs.jar");
        printLink(ps,versionPrefix+"/CLI/jax-rs-to-raml.jar","jax-rs-to-raml.jar");
        ps.println("</ul>");
        ps.println("</ul>");
    }
    ps.println("</body>\n</html>");
    //ps.close();
}
/**
 * prints a link to print stream
 * @param ps
 * @param href
 * @param title
 */
void printLink(PrintStream ps,String href,String title){
    ps.println("<li>");
    ps.println("<a href='"+href+"' target=\"_blank\"/>"+title+"</a>");
    ps.println("</li>");
}
/**
 *
 * @param settings
 * @return prepares tempfolder to deploy
 */
File prepareToDeploy(Settings settings){
    File root=settings.getProjectFolder();
    File annotationsProcessor=null;
    File annotationsProcessorFolder=new File(new File(new File(root,"jaxrs-to-raml"),"com.mulesoft.jaxrs.raml.generator.annotations"),"target");
    for (File f:annotationsProcessorFolder.listFiles()){
        if (f.getName().endsWith("dependencies.jar")){
            annotationsProcessor=f;
            break;
        }
    }
    File commandLine=null;
    File commandLineFolder=new File(new File(new File(root,"raml-to-jaxrs"),"core"),"target");
    for (File f:commandLineFolder.listFiles()){
        if (f.getName().endsWith("dependencies.jar")){
            commandLine=f;
            break;
        }
    }
    File sourceEclipse=new File(new File(new File(new File(root,"eclipse"),"updateSite"),"target"),"repository");

    File toDeploy=new File(root,"toS3");
    File toDeployClI=new File(toDeploy,"CLI");
    File toDeployECLIPSE=new File(toDeploy,"eclipse");
    toDeploy.mkdir();
    toDeployClI.mkdir();
    toDeployECLIPSE.mkdir();
    new File(toDeployClI,"raml-to-jax-rs.jar").bytes=commandLine.bytes;
    new File(toDeployClI,"jax-rs-to-raml.jar").bytes=annotationsProcessor.bytes;
    ant.copy(todir: toDeployECLIPSE) {
        fileset(dir : sourceEclipse)
    }
    return toDeploy;
}
/**
 * print version item to html
 * @param ps
 * @param versionNumber
 * @param st
 */
void generateVersionContent(PrintStream ps,String versionNumber,Settings st){
    ps.println("<ul>");
    ps.println("<li>raml-for-jax-rs-"+versionNumber+"</li>");
    println(st.rootDeployPath+versionNumber+"/"+st.cliPath+versionNumber+"/raml-to-jax-rs-");
}
/**
 * copy files recurrently
 * @param s3
 * @param b
 * @param d
 * @param source
 * @param prefix
 * @throws Exception
 */
void processDirectory(RestS3Service s3, S3Bucket b, File d,File source,prefix) throws Exception {
    File [] files = d.listFiles();
    for (int i=0; i<files.length; i++) {
        if (files[i].isDirectory()) {
            processDirectory(s3, b,  files[i],source,prefix);
        }
        else {
            copyFile(s3, b, d, files[i].getPath(),source,prefix);
        }
    }
}

/**
 * copy file to s3
 * @param s3
 * @param b
 * @param d
 * @param file
 * @param source
 * @param prefix
 * @throws Exception
 */
void copyFile(RestS3Service s3, S3Bucket b, File d, String file,File source,String prefix) throws Exception {
    String key = (file).replace('\\', '/');
    String rootKey=(source.getAbsolutePath()).replace('\\', '/');
    key=prefix+key.substring(rootKey.length());
    S3Object obj = new S3Object(b, key);
    File f = new File(file);
    obj.setContentLength(f.length());
    try {
        obj.setDataInputFile(f);
        obj = s3.putObject(b, obj);
    } catch (S3ServiceException e) {
        throw e;
    }
    if (true) {
        log("copied : "+key);
    }
}
void log (String str){
    println(str);
}